'use client';

import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { ArrowLeft, Eye, Send } from 'lucide-react';
import { Breadcrumb } from '@/components/ui/breadcrumb';

interface Preset {
  id: string;
  name: string;
  authorName?: string;
  autoGenerateDigest: boolean;
  headerContent?: string;
  footerContent?: string;
}

export default function ApplyPresetPage() {
  const params = useParams();
  const router = useRouter();
  const [preset, setPreset] = useState<Preset | null>(null);
  const [loading, setLoading] = useState(true);
  const [content, setContent] = useState('');
  const [title, setTitle] = useState('');
  const [previewContent, setPreviewContent] = useState('');

  useEffect(() => {
    fetchPreset();
  }, [params.id]);

  useEffect(() => {
    generatePreview();
  }, [content, title, preset]);

  const fetchPreset = async () => {
    try {
      const response = await fetch(`/api/presets/${params.id}`);
      const data = await response.json();

      if (data.success) {
        setPreset(data.data);
      } else {
        console.error('获取预设失败:', data.message);
      }
    } catch (error) {
      console.error('获取预设失败:', error);
    } finally {
      setLoading(false);
    }
  };

  // Markdown转HTML的简单实现
  const markdownToHtml = (markdown: string) => {
    if (!markdown || !markdown.trim()) return '';

    return markdown
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" style="color: #3b82f6; text-decoration: underline;">$1</a>')
      .replace(/!\[([^\]]*)\]\(([^)]+)\)/g, '<img src="$2" alt="$1" style="max-width: 100%; height: auto; margin: 8px 0; border-radius: 4px;" />')
      .replace(/^> (.+)$/gm, '<blockquote style="border-left: 4px solid #e5e7eb; padding-left: 16px; margin: 16px 0; color: #6b7280; font-style: italic;">$1</blockquote>')
      .replace(/^- (.+)$/gm, '<li style="margin: 4px 0;">$1</li>')
      .replace(/^1\. (.+)$/gm, '<li style="margin: 4px 0;">$1</li>')
      .replace(/^---$/gm, '<hr style="margin: 24px 0; border: none; border-top: 1px solid #e5e7eb;">')
      .replace(/\n/g, '<br>')
      // 处理精选文章占位符
      .replace(/{{featured-articles:(\d+)}}/g, (match, count) => {
        return `<div style="border: 2px dashed #3b82f6; padding: 16px; border-radius: 8px; background: #eff6ff; margin: 16px 0;">
          <h4 style="color: #1d4ed8; margin: 0 0 8px 0;">📚 精选文章推荐</h4>
          <p style="color: #1d4ed8; margin: 0; font-size: 14px;">插件将智能匹配 ${count} 篇相关文章并插入到此位置</p>
        </div>`;
      });
  };

  const generatePreview = () => {
    if (!preset) return;

    let fullContent = content;

    // 添加开头定制内容
    if (preset.headerContent) {
      fullContent = markdownToHtml(preset.headerContent) + '<br><br>' + fullContent;
    }

    // 添加末尾定制内容
    if (preset.footerContent) {
      fullContent += '<br><br><hr style="margin: 24px 0; border: none; border-top: 1px solid #e5e7eb;"><br>' + markdownToHtml(preset.footerContent);
    }

    setPreviewContent(fullContent);
  };

  const applyToWechat = async () => {
    if (!preset) return;

    try {
      // 发送消息给Chrome插件
      const message = {
        action: 'fillContent',
        data: {
          title,
          content,
          preset
        }
      };

      // 尝试发送消息给插件
      if (typeof window !== 'undefined' && typeof (window as any).chrome !== 'undefined' && (window as any).chrome.runtime) {
        (window as any).chrome.runtime.sendMessage(message, (response: any) => {
          if ((window as any).chrome.runtime.lastError) {
            alert('请确保已安装并启用字流Chrome插件');
          } else {
            alert('内容已发送到微信编辑器！');
          }
        });
      } else {
        alert('请在Chrome浏览器中使用此功能');
      }
    } catch (error) {
      console.error('应用预设失败:', error);
      alert('应用预设失败，请重试');
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">加载中...</p>
        </div>
      </div>
    );
  }

  if (!preset) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <p className="text-gray-600">预设不存在</p>
          <button
            onClick={() => router.push('/dashboard/presets')}
            className="mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            返回预设列表
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* 头部 */}
        <div className="mb-8">
          <div className="flex items-center gap-4 mb-4">
            <button
              onClick={() => router.back()}
              className="flex items-center gap-2 text-gray-600 hover:text-gray-900 transition-colors"
            >
              <ArrowLeft className="w-4 h-4" />
              返回
            </button>
          </div>

          <Breadcrumb
            items={[
              { label: '仪表板', href: '/dashboard' },
              { label: '发布预设', href: '/dashboard/presets' },
              { label: preset.name, href: `/dashboard/presets/${preset.id}` },
              { label: '应用预设' }
            ]}
          />

          <div className="mt-6">
            <h1 className="text-3xl font-bold text-gray-900">应用预设: {preset.name}</h1>
            <p className="mt-2 text-gray-600">
              编辑内容并预览效果，然后一键应用到微信公众号编辑器
            </p>
          </div>
        </div>

        {/* 主要内容 */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* 编辑区域 */}
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-4">编辑内容</h2>

            <div className="space-y-4">
              {/* 标题输入 */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  文章标题
                </label>
                <input
                  type="text"
                  value={title}
                  onChange={(e) => setTitle(e.target.value)}
                  placeholder="请输入文章标题..."
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
              </div>

              {/* 正文输入 */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  正文内容
                </label>
                <textarea
                  value={content}
                  onChange={(e) => setContent(e.target.value)}
                  placeholder="请输入正文内容..."
                  rows={12}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 font-mono text-sm"
                />
              </div>

              {/* 应用按钮 */}
              <div className="flex gap-3">
                <button
                  onClick={applyToWechat}
                  disabled={!title || !content}
                  className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                >
                  <Send className="w-4 h-4" />
                  应用到微信编辑器
                </button>
              </div>
            </div>
          </div>

          {/* 预览区域 */}
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div className="flex items-center gap-2 mb-4">
              <Eye className="w-5 h-5 text-gray-600" />
              <h2 className="text-lg font-semibold text-gray-900">预览效果</h2>
            </div>

            <div className="border border-gray-200 rounded-lg p-4 min-h-96 bg-gray-50">
              {title && (
                <h1 className="text-xl font-bold text-gray-900 mb-4 pb-2 border-b border-gray-200">
                  {title}
                </h1>
              )}

              {preset.authorName && (
                <p className="text-sm text-gray-600 mb-4">
                  作者：{preset.authorName}
                </p>
              )}

              <div
                className="prose prose-sm max-w-none"
                dangerouslySetInnerHTML={{
                  __html: previewContent || '<p class="text-gray-400">请输入内容以查看预览效果</p>'
                }}
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
