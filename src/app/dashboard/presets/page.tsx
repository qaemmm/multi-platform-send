'use client';

import { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import { useRouter } from 'next/navigation';
import { Plus, Settings, Star, Trash2, Edit, ArrowLeft, Play } from 'lucide-react';
import { Breadcrumb } from '@/components/ui/breadcrumb';

interface PublishPreset {
  id: string;
  name: string;
  isDefault: boolean;
  authorName?: string;
  autoGenerateDigest: boolean;
  headerContent?: string;
  footerContent?: string;
  createdAt: string;
  updatedAt: string;
}

export default function PresetsPage() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const [presets, setPresets] = useState<PublishPreset[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    if (status === 'unauthenticated') {
      router.push('/auth/signin');
      return;
    }

    if (status === 'authenticated') {
      fetchPresets();
    }
  }, [status, router]);

  const fetchPresets = async () => {
    try {
      setLoading(true);
      const response = await fetch('/api/presets');
      const data = await response.json();

      if (data.success) {
        setPresets(data.data);
      } else {
        setError(data.error || '获取预设失败');
      }
    } catch (error) {
      console.error('获取预设失败:', error);
      setError('获取预设失败');
    } finally {
      setLoading(false);
    }
  };

  const handleSetDefault = async (presetId: string) => {
    try {
      const response = await fetch(`/api/presets/${presetId}/set-default`, {
        method: 'POST',
      });
      const data = await response.json();

      if (data.success) {
        // 更新本地状态
        setPresets(prev => prev.map(preset => ({
          ...preset,
          isDefault: preset.id === presetId
        })));
      } else {
        setError(data.error || '设置默认预设失败');
      }
    } catch (error) {
      console.error('设置默认预设失败:', error);
      setError('设置默认预设失败');
    }
  };

  const handleDelete = async (presetId: string) => {
    if (!confirm('确定要删除这个预设吗？')) {
      return;
    }

    try {
      const response = await fetch(`/api/presets/${presetId}`, {
        method: 'DELETE',
      });
      const data = await response.json();

      if (data.success) {
        setPresets(prev => prev.filter(preset => preset.id !== presetId));
      } else {
        setError(data.error || '删除预设失败');
      }
    } catch (error) {
      console.error('删除预设失败:', error);
      setError('删除预设失败');
    }
  };

  if (status === 'loading' || loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">加载中...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-4xl mx-auto py-8 px-4">
        {/* 面包屑导航 */}
        <Breadcrumb
          items={[{ label: '发布预设' }]}
          className="mb-6"
        />

        {/* 页面标题 */}
        <div className="flex items-center gap-4 mb-8">
          <button
            onClick={() => router.push('/dashboard')}
            className="p-2 text-gray-400 hover:text-gray-600 transition-colors"
            title="返回控制台"
          >
            <ArrowLeft className="w-6 h-6" />
          </button>
          <div className="flex-1">
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-3xl font-bold text-gray-900">发布预设</h1>
                <p className="mt-2 text-gray-600">管理你的公众号发布预设，一键填充重复信息</p>
              </div>
              <button
                onClick={() => router.push('/dashboard/presets/new')}
                className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                <Plus className="w-5 h-5 mr-2" />
                新建预设
              </button>
            </div>
          </div>
        </div>

        {/* 错误提示 */}
        {error && (
          <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
            <p className="text-red-600">{error}</p>
          </div>
        )}

        {/* 预设列表 */}
        {presets.length === 0 ? (
          <div className="text-center py-12">
            <Settings className="w-16 h-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">还没有预设</h3>
            <p className="text-gray-600 mb-6">创建你的第一个发布预设，让发布更高效</p>
            <button
              onClick={() => router.push('/dashboard/presets/new')}
              className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              <Plus className="w-5 h-5 mr-2" />
              创建预设
            </button>
          </div>
        ) : (
          <div className="grid gap-6">
            {presets.map((preset) => (
              <div
                key={preset.id}
                className="bg-white rounded-lg shadow-sm border border-gray-200 p-6"
              >
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center gap-3 mb-3">
                      <h3 className="text-lg font-semibold text-gray-900">
                        {preset.name}
                      </h3>
                      {preset.isDefault && (
                        <span className="inline-flex items-center px-2 py-1 bg-yellow-100 text-yellow-800 text-xs font-medium rounded-full">
                          <Star className="w-3 h-3 mr-1" />
                          默认
                        </span>
                      )}
                    </div>

                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                      <div>
                        <span className="text-gray-500">作者：</span>
                        <span className="text-gray-900">{preset.authorName || '未设置'}</span>
                      </div>
                    </div>

                    <div className="mt-3 grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                      <div>
                        <span className="text-gray-500">AI摘要：</span>
                        <span className="text-gray-900">{preset.autoGenerateDigest ? '启用' : '关闭'}</span>
                      </div>
                      <div>
                        <span className="text-gray-500">开头内容：</span>
                        <span className="text-gray-900">{preset.headerContent ? '已设置' : '未设置'}</span>
                      </div>
                      <div>
                        <span className="text-gray-500">末尾内容：</span>
                        <span className="text-gray-900">{preset.footerContent ? '已设置' : '未设置'}</span>
                      </div>
                    </div>
                  </div>

                  <div className="flex items-center gap-2 ml-4">
                    <button
                      onClick={() => router.push(`/dashboard/presets/${preset.id}/apply`)}
                      className="p-2 text-gray-400 hover:text-green-600 transition-colors"
                      title="应用预设"
                    >
                      <Play className="w-5 h-5" />
                    </button>
                    {!preset.isDefault && (
                      <button
                        onClick={() => handleSetDefault(preset.id)}
                        className="p-2 text-gray-400 hover:text-yellow-600 transition-colors"
                        title="设为默认"
                      >
                        <Star className="w-5 h-5" />
                      </button>
                    )}
                    <button
                      onClick={() => router.push(`/dashboard/presets/${preset.id}/edit`)}
                      className="p-2 text-gray-400 hover:text-blue-600 transition-colors"
                      title="编辑"
                    >
                      <Edit className="w-5 h-5" />
                    </button>
                    <button
                      onClick={() => handleDelete(preset.id)}
                      className="p-2 text-gray-400 hover:text-red-600 transition-colors"
                      title="删除"
                    >
                      <Trash2 className="w-5 h-5" />
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}
